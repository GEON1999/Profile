{
  "projects": [
    {
      "id": "DayShare",
      "name": "DayShare",
      "description": "연인, 동호회, 육아 등 다양한 관계 속에서 함께 일기를 공유할 수 있는 웹",
      "technologies": [
        "Next.js",
        "Tailwind",
        "AWS",
        "Flutter",
        "FastAPI",
        "zustand",
        "NextAuth"
      ],
      "images": [
        "/images/dayshare/1.png",
        "/images/dayshare/2.png",
        "/images/dayshare/3.png",
        "/images/dayshare/4.png",
        "/images/dayshare/5.png"
      ],
      "period": "2024.08 ~ 진행중",
      "role": "personal",
      "work": [
        {
          "title": "실시간 알림 기능 구현",
          "description": ["FCM을 활용해 푸시 알림 시스템 구축"]
        },
        {
          "title": "AI 기반 일기 공감 시스템 개발",
          "description": ["감정 분석과 키워드 추출로 AI 맞춤 답변 제공"]
        },
        {
          "title": "크로스 플랫폼 모바일 앱 개발",
          "description": ["Flutter로 단일 코드베이스 모바일 앱 개발"]
        },
        {
          "title": "실시간 채팅 시스템 구축",
          "description": ["FastAPI WebSocket으로 실시간 양방향 통신 구현"]
        }
      ],

      "issues": [
        {
          "title": "서버 아키텍처 최적화",
          "description": [
            "클라이언트-DB 직접 연결 방식으로 인한 이슈 발생",
            "복잡한 쿼리 로직이 클라이언트에 노출되어 보안 취약점 발생",
            "ORM 문법으로 인한 N+1 쿼리 이슈로 성능 저하",
            "프론트엔드에서 DB 최적화 로직 관리 시 코드 복잡도 증가"
          ],
          "tech": [
            [
              "FastAPI",
              ["낮은 러닝커브와 Swagger UI 지원으로 빠른 백엔드 구성"]
            ],
            [
              "EC2 t3g.small & RDS MySQL",
              ["초기 비용 없는 AWS Free Tier 옵션으로 경량 트래픽 처리 적합"]
            ]
          ],
          "solution": ["AWS RDS와 EC2 인스턴스를 활용해 FastAPI 백엔드로 전환"],
          "result": [
            "N+1 쿼리 최적화 및 서브쿼리 도입으로 응답 시간 60% 이상 단축",
            "서버 리소스 분리로 시스템 안정성 확보 및 트래픽 처리량 2배 이상 증가",
            "API 서버 계층 추가로 비즈니스 로직 분리"
          ]
        },
        {
          "title": "보안 강화를 위한 토큰 관리 시스템 개선",
          "description": [
            "Refresh token의 만료기간이 고정되어 탈취 시 장기간 악용에 대한 위험 발생"
          ],
          "tech": [
            [
              "RTR(Refresh Token Rotation) 패턴 선택",
              [
                "매 요청마다 RT를 갱신하므로 재사용 탐지가 가능하고, 보안성과 운영 효율↑"
              ]
            ]
          ],
          "solution": [
            "로그인: device_info 포함 RT 발급",
            "갱신: RT 검증 → 신규 RT 발급 → 이전 RT 폐기 → AT 재발급",
            "로그아웃: 사용자 모든 RT 폐기"
          ],
          "result": ["장기간 RT 악용 차단", "보안·유연성 강화"]
        }
      ],
      "github": "https://github.com/GEON1999/Day_Share_renew",
      "website": "https://dayshare.site/"
    },
    {
      "id": "LauncherAdmin",
      "name": "LauncherAdmin",
      "description": "새로운 버전의 PC방 런처를 관리하는 웹",
      "technologies": [
        "Nextjs14",
        "Typescript",
        "NextAuth",
        "multer",
        "react-hook-form",
        "axios",
        "valtio",
        "tanstack-query",
        "tailwindcss"
      ],
      "images": ["/images/pcl/1.png", "/images/pcl/2.png"],
      "period": "2024.05 ~ 2024.09",
      "role": "Frontend Developer",
      "work": [
        {
          "title": "퍼블리싱 작업",
          "description": ["Tailwind CSS로 Zepplin 시안 반응형 웹 퍼블리싱"]
        },
        {
          "title": "Valtio를 활용한 효율적인 상태 관리",
          "description": ["Valtio로 실시간 동기화 상태 관리 구현"]
        },
        {
          "title": "NextAuth를 활용한 인증 시스템 구현",
          "description": ["NextAuth로 로그인 인증 시스템 구현"]
        }
      ],
      "issues": [
        {
          "title": "컴포넌트 간 과도한 prop drilling 발생",
          "description": [
            "컴포넌트 계층 구조가 깊어짐에 따라 상태를 전달하는 prop drilling이 빈번히 발생",
            "컴포넌트 간 의존성↑ 유지보수와 재사용성↓"
          ],
          "tech": [
            [
              "Zustand vs Valtio",
              [
                "중첩 상태를 직접 mutate 가능한 Valtio가 Form·테이블이 많은 백오피스 환경에 더 적합하다고 판단"
              ]
            ]
          ],
          "solution": [
            "Valtio로 글로벌 상태 관리 시스템 구축, Atomic 패턴 도입으로 필요한 상태만 구독"
          ],
          "result": [
            "상태 전파 로직 단순화 ",
            "컴포넌트 의존도 감소",
            "신규 기능 개발 속도 향상"
          ]
        }
      ]
    },
    {
      "id": "Battlepod",
      "name": "Battlepod",
      "description": "각종 게임을 통해 토너먼트를 개최하고 상품을 제공해주는 서비스",
      "technologies": [
        "React",
        "gsap",
        "multer",
        "ngrok",
        "react-hook-form",
        "passport",
        "react-dropzone",
        "valtio",
        "axios"
      ],
      "images": [
        "/images/battlepod/1.png",
        "/images/battlepod/2.png",
        "/images/battlepod/3.png",
        "/images/battlepod/4.png"
      ],
      "period": "2024.05 ~ 2024.09",
      "role": "Frontend Developer",
      "work": [
        {
          "title": "Passport를 활용한 소셜 로그인 기능 구현",
          "description": ["카카오·로컬 소셜 로그인 기능 구현"]
        },
        {
          "title": "RSO(Riot Sign On) 연동",
          "description": ["Valtio로 실시간 동기화 상태 관리 구현"]
        },
        {
          "title": "드래그 앤 드롭을 통한 파일 업로드 기능 구현",
          "description": ["React Dropzone으로 파일 업로드 구현"]
        },
        {
          "title": "기브어웨이 즉시추첨 기능 구현",
          "description": ["즉시추첨 기능으로 기브어웨이 UX 개선"]
        },
        {
          "title": "PC방 전광판 개발",
          "description": ["PC방 전용 전광판 페이지 개발 및 실시간 표시"]
        }
      ]
    },
    {
      "id": "Battlepod-Admin",
      "name": "Battlepod Admin",
      "description": "토너먼트 대회 및 이벤트 관리를 위한 어드민 페이지",
      "technologies": [
        "Nextjs12",
        "Typescript",
        "tanstack-query",
        "passport",
        "mui"
      ],
      "period": "2023.04 ~ 2023.08",
      "images": [
        "/images/battlepod-admin/1.JPG",
        "/images/battlepod-admin/2.JPG",
        "/images/battlepod-admin/3.JPG",
        "/images/battlepod-admin/4.JPG",
        "/images/battlepod-admin/5.JPG",
        "/images/battlepod-admin/6.JPG",
        "/images/battlepod-admin/7.JPG",
        "/images/battlepod-admin/8.JPG",
        "/images/battlepod-admin/9.JPG",
        "/images/battlepod-admin/10.JPG",
        "/images/battlepod-admin/11.JPG",
        "/images/battlepod-admin/12.JPG",
        "/images/battlepod-admin/13.JPG"
      ],
      "role": "Frontend Developer",
      "work": [
        {
          "title": "이슈 관리",
          "description": [
            "JIRA를 활용한 체계적 QA 이슈 관리로 버그 해결 프로세스 효율화"
          ]
        },
        {
          "title": "데이터 상태 관리",
          "description": ["TanStack Query 도입으로 데이터 상태 관리 향상"]
        }
      ],
      "issues": [
        {
          "title": "코드 마이그레이션",
          "description": [
            "Trimou 기반 시스템이 프로젝트 규모 확장에 따라 코드베이스 복잡도 증가, 컴포넌트 재사용 어려움, 새로운 기능 추가 시 전체 구조 영향으로 유지보수성 저하"
          ],
          "tech": [
            [
              "확장성과 유지보수성 향상을 위해 Next.js 채택",
              [
                "컴포넌트 기반 구조로 코드 모듈화 및 재사용성 강화",
                "파일 시스템 기반 라우팅으로 페이지 구조 직관적 관리",
                "선언적 데이터 페칭으로 비즈니스 로직과 UI 분리 용이"
              ]
            ]
          ],
          "solution": [
            "점진적 마이그레이션 접근법으로 핵심 페이지부터 Next.js12로 전환",
            "TanStack Query로 데이터 상태 관리 패턴 일관화",
            "Zustand 도입으로 복잡한 상태 로직 분리"
          ],
          "result": [
            "코드 유지보수 공수 감소",
            "신규 기능 개발 주기 단축",
            "프로젝트 규모 확장 용이"
          ]
        }
      ]
    }
  ]
}
