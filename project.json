{
  "projects": [
    {
      "id": "DayShare",
      "name": "DayShare",
      "description": "연인, 동호회, 육아 등 다양한 관계 속에서 함께 일기를 공유할 수 있는 웹",
      "technologies": [
        "Next.js",
        "Tailwind",
        "AWS",
        "Flutter",
        "FastAPI",
        "zustand",
        "NextAuth"
      ],
      "images": [
        "/images/dayshare/1.png",
        "/images/dayshare/2.png",
        "/images/dayshare/3.png",
        "/images/dayshare/4.png",
        "/images/dayshare/5.png"
      ],
      "period": "2024.08 ~ 진행중",
      "role": "personal",
      "work": [
        {
          "title": "AI 기반 일기 공감 시스템 개발",
          "description": ["감정 분석과 키워드 추출로 AI 맞춤 답변 제공"]
        },
        {
          "title": "크로스 플랫폼 모바일 앱 개발",
          "description": ["Flutter로 단일 코드베이스 모바일 앱 개발"]
        },
        {
          "title": "RTR(Refresh Token Rotation) 구현",
          "description": ["RT 탈취 시 장기간 악용에 대한 보안 강화"]
        }
      ],

      "issues": [
        {
          "title": "FCM을 활용한 실시간 알림 기능 구현",
          "description": [
            "공유 일기, 일정, 댓글 등 새로운 사용자 활동에 대한 실시간 피드백(알림) 부재"
          ],
          "tech": [
            [
              "안정적이고 확장성 높은 실시간 알림 기능 구현을 위해 FCM 도입",
              [
                "Google의 신뢰성 높은 인프라를 활용하여 안정적인 알림 전송 보장",
                "멀티 플랫폼(iOS, Android, Web)을 지원하여 크로스 플랫폼 앱에 적합",
                "백엔드에서 간단한 API 호출만으로 특정 사용자에게 타겟팅된 알림 전송 가능"
              ]
            ]
          ],
          "solution": [
            "FastAPI 백엔드에 SDK를 연동하여 FCM 알림 전송 모듈 구현",
            "이벤트 발생 시, 공유 달력에 소속된 사용자들에게 비동기적으로 알림을 전송하는 로직 구현",
            "사용자별 기기 토큰을 데이터베이스에서 효율적으로 관리하여 정확한 대상에게 알림 전달"
          ],
          "result": [
            "유저간 활동 반응을 즉각적으로 확인할 수 있게 되어 핵심 사용자 경험(UX) 개선",
            "향후 다양한 이벤트 기반 알림 기능을 확장할 수 있는 기반 마련"
          ]
        },
        {
          "title": "WebSocket 기반 실시간 채팅 기능 구현",
          "description": [
            "사용자 간 실시간 소통 및 즉각적인 피드백(채팅) 부재로 인한 상호작용의 어려움"
          ],
          "tech": [
            [
              "백엔드:  FastAPI, WebSocket",
              [
                "비동기 처리에 강한 FastAPI와 표준 WebSocket을 활용해 실시간 통신의 낮은 지연 및 고성능 확보"
              ]
            ],
            [
              "프론트엔드 : Next.js, 브라우저 WebSocket API, TanStack Query",
              [
                "복잡한 채팅 UI를 효율적으로 구축",
                "비동기 데이터 관리 로직을 분리하여 코드의 재사용성과 유지보수성을 높임"
              ]
            ]
          ],
          "solution": [
            "백엔드 ConnectionManager를 통해 다수의 WebSocket 연결을 중앙 관리",
            "특정 채팅방으로 효율적인 메시지 브로드캐스팅을 구현하여 안정적인 통신 보장",
            "채팅방 관리(생성/조회)는 RESTful API를 활용하여 효율적인 API 설계",
            "실제 메시지 교환은 WebSocket으로 분리하여 각 프로토콜의 장점을 극대화"
          ],
          "result": [
            "실시간 양방향 소통 채널 구축으로 사용자 상호작용 및 서비스 참여도 증진",
            "WebSocket을 통한 서버 부하 감소 및 빠른 응답 속도 달성"
          ]
        },
        {
          "title": "서버 아키텍처 최적화",
          "description": [
            "클라이언트-DB 직접 연결로 인한 N+1 쿼리 이슈 & 코드 복잡도 증가 및 보안/확장성 취약"
          ],
          "tech": [
            [
              "API 서버 도입 : FastAPI",
              [
                "DB 접근 로직 중앙화 및 비즈니스 로직 분리",
                "빠른 개발과 자동 API 문서화 지원"
              ]
            ],
            [
              "클라우드 인프라 : AWS EC2 & RDS MySQL",
              [
                "DB 운영 안정성(RDS) 및 유연한 컴퓨팅(EC2) 확보",
                "Free Tier로 초기 비용 감소"
              ]
            ]
          ],
          "solution": [
            "클라이언트-DB 직접 연결을 FastAPI 백엔드 API 호출 방식으로 전면 개편",
            "RM 쿼리 최적화 (N+1 해결) 및 서브쿼리 도입으로 DB 접근 효율화"
          ],
          "result": [
            "응답 속도 60% 이상 단축 (N+1 쿼리 최적화)",
            "트래픽 처리량 2배 이상 증대 및 시스템 안정성 확보 (서버 리소스 분리)",
            "개발 생산성 및 유지보수성 향상 (명확한 로직 분리)"
          ]
        }
      ],
      "github": "https://github.com/GEON1999/Day_Share_renew",
      "website": "https://dayshare.site/"
    },
    {
      "id": "LauncherAdmin",
      "name": "LauncherAdmin",
      "description": "새로운 버전의 PC방 런처를 관리하는 웹",
      "technologies": [
        "Nextjs14",
        "Typescript",
        "NextAuth",
        "multer",
        "react-hook-form",
        "axios",
        "valtio",
        "tanstack-query",
        "tailwindcss"
      ],
      "images": ["/images/pcl/1.png", "/images/pcl/2.png"],
      "period": "2024.05 ~ 2024.09",
      "role": "Frontend Developer",
      "work": [
        {
          "title": "퍼블리싱 작업",
          "description": ["Tailwind CSS로 Zepplin 시안 반응형 웹 퍼블리싱"]
        },
        {
          "title": "Valtio를 활용한 효율적인 상태 관리",
          "description": ["Valtio로 실시간 동기화 상태 관리 구현"]
        },
        {
          "title": "NextAuth를 활용한 인증 시스템 구현",
          "description": ["NextAuth로 로그인 인증 시스템 구현"]
        }
      ],
      "issues": [
        {
          "title": "Valtio를 활용한 전역 상태 관리 시스템 구축 및 아키텍처 최적화",
          "description": [
            "컴포넌트 계층 구조가 깊어짐에 따라 상태를 전달하는 prop drilling이 빈번히 발생",
            "컴포넌트 간 의존성↑ 유지보수와 재사용성↓"
          ],
          "tech": [
            [
              "Zustand vs Valtio",
              [
                "Valtio는 중첩 상태를 직접 mutate 가능함으로, Form·Table이 많은 백오피스 환경에서 개발 생산성을 높이는 데 더 적합하다고 판단"
              ]
            ]
          ],
          "solution": [
            "Valtio로 글로벌 상태 관리 시스템 구축, Atomic 패턴 도입으로 필요한 상태만 구독"
          ],
          "result": [
            "복잡했던 상태 전파 로직을 단순화하여 신규 기능 개발 속도 증대 및 유지보수 공수 감소",
            "컴포넌트 간 의존성을 분리하여 코드의 재사용성과 테스트 용이성 확보",
            "중앙화된 상태 관리를 통해 데이터 흐름의 예측 가능성을 높여 잠재적 버그 발생률 감소"
          ]
        }
      ]
    },
    {
      "id": "Battlepod",
      "name": "Battlepod",
      "description": "각종 게임을 통해 토너먼트를 개최하고 상품을 제공해주는 서비스",
      "technologies": [
        "React",
        "gsap",
        "multer",
        "ngrok",
        "react-hook-form",
        "passport",
        "react-dropzone",
        "valtio",
        "axios"
      ],
      "images": [
        "/images/battlepod/1.png",
        "/images/battlepod/2.png",
        "/images/battlepod/3.png",
        "/images/battlepod/4.png"
      ],
      "period": "2023.07 ~ 2024.08",
      "role": "Frontend Developer",
      "work": [
        {
          "title": "Passport를 활용한 소셜 로그인 기능 구현",
          "description": ["카카오·로컬 소셜 로그인 기능 구현"]
        },
        {
          "title": "RSO(Riot Sign On) 연동",
          "description": ["Valtio로 실시간 동기화 상태 관리 구현"]
        },
        {
          "title": "드래그 앤 드롭을 통한 파일 업로드 기능 구현",
          "description": ["React Dropzone으로 파일 업로드 구현"]
        },
        {
          "title": "기브어웨이 즉시추첨 기능 구현",
          "description": ["즉시추첨 기능으로 기브어웨이 UX 개선"]
        },
        {
          "title": "PC방 전광판 개발",
          "description": ["PC방 전용 전광판 페이지 개발 및 실시간 표시"]
        }
      ]
    },
    {
      "id": "Battlepod-Admin",
      "name": "Battlepod Admin",
      "description": "토너먼트 대회 및 이벤트 관리를 위한 어드민 페이지",
      "technologies": [
        "Nextjs12",
        "Typescript",
        "tanstack-query",
        "passport",
        "mui"
      ],
      "period": "2023.04 ~ 2023.08",
      "images": [
        "/images/battlepod-admin/1.JPG",
        "/images/battlepod-admin/2.JPG",
        "/images/battlepod-admin/3.JPG",
        "/images/battlepod-admin/4.JPG",
        "/images/battlepod-admin/5.JPG",
        "/images/battlepod-admin/6.JPG",
        "/images/battlepod-admin/7.JPG",
        "/images/battlepod-admin/8.JPG",
        "/images/battlepod-admin/9.JPG",
        "/images/battlepod-admin/10.JPG",
        "/images/battlepod-admin/11.JPG",
        "/images/battlepod-admin/12.JPG",
        "/images/battlepod-admin/13.JPG"
      ],
      "role": "Frontend Developer",
      "work": [
        {
          "title": "이슈 관리",
          "description": [
            "JIRA를 활용한 체계적 QA 이슈 관리로 버그 해결 프로세스 효율화"
          ]
        },
        {
          "title": "데이터 상태 관리",
          "description": ["TanStack Query 도입으로 데이터 상태 관리 향상"]
        }
      ],
      "issues": [
        {
          "title": "프론트엔드 현대화: Trimou에서 Next.js 기반 아키텍처로 전환",
          "description": [
            "기존 Trimou 시스템의 구조적 한계로 인한 유지보수성 및 확장성 저하, 개발 속도 지연 발생"
          ],
          "tech": [
            [
              "Next.js 12",
              [
                "서버 사이드 렌더링(SSR)/정적 사이트 생성(SSG) 지원",
                "강력한 개발 생태계",
                "파일 시스템 기반 라우팅, 컴포넌트 기반 아키텍처를 통해 성능, 확장성, 개발자 경험(DX) 향상"
              ]
            ],
            [
              "상태 관리 고도화",
              [
                "TanStack Query: 서버 상태 관리 일원화, 데이터 페칭 및 캐싱 로직 표준화",
                "Zustand: 클라이언트 상태 관리 단순화 및 복잡한 상태 로직의 효과적인 분리"
              ]
            ]
          ],
          "solution": [
            "점진적 마이그레이션 접근법으로 핵심 페이지부터 Next.js12로 전환",
            "TanStack Query로 데이터 상태 관리 패턴 일관화",
            "Zustand 도입으로 복잡한 상태 로직 분리"
          ],
          "result": [
            "코드 유지보수 공수 감소 및 신규 기능 개발 주기 단축 달성",
            "초기 로딩 속도 개선 및 전반적인 페이지 응답성 향상",
            "향후 기능 확장 및 유지보수를 위한 견고한 기술 기반 마련"
          ]
        }
      ]
    }
  ]
}
